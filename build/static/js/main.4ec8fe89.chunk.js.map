{"version":3,"sources":["logo.svg","serviceWorker.js","index.js","App.js"],"names":["module","exports","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","Game","row","col","color","id","this","board","makeBoard","i","tempCol","j","push","length","process","stdout","write","log","neighborsCounter","dup","Set","n","JSON","stringify","has","add","tempBoard","parse","cell","countNeighbors","useState","setBoard","getNeighbors","copyBoard","useEffect","tempboard","className","map","squareLists","grid","onClick","e","square","toggle","step"],"mappings":"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","file":"static/js/main.4ec8fe89.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container } from 'react-bootstrap';\n\n// step 1:\n// write a class that represents the game. It contains a 2d matrix for size N by N. \n\n// add 3 methods to that class:\n\n// print() // just prints out the board\n// step() // runs 1 step\n// toggle(row, column) // this is an action the human player can take. each time it runs it toggles a cell eitgher on or off\n//false is dead\n//true is alive \n\nclass Game {\n  constructor(row, col, color, id) {\n    this.row = row\n    this.col = col\n    this.board = this.makeBoard(row, col, color, id)\n    this.color = color\n    this.id = id\n  }\n\n  makeBoard(row, col, color, id) {\n    let board = []\n    color = null\n    for (let i = 0; i < row; i++) {\n      let tempCol = []\n      for (let j = 0; j < col; j++) {\n        id = [i, j]\n        tempCol.push({ id, color })\n      }\n      board.push(tempCol)\n    }\n    return board\n  }\n\n  printBoard() {\n    for (let i = 0; i < this.board.length; i++) {\n      for (let j = 0; j < this.board[i].length; j++) {\n        if (this.board[i][j] === true) {\n          process.stdout.write('O')\n        } else {\n          process.stdout.write('X')\n        }\n      }\n      console.log('')\n    }\n    console.log('')\n  }\n\n  countNeighbors(row, col) {\n    let neighborsCounter = 0\n    let dup = new Set([])\n    // console.log('hi2')\n    if (row - 1 >= 0) {\n      if (this.board[row - 1][col]) {\n        let n = [row - 1, col]\n        n = JSON.stringify(n)\n        if (!dup.has(n)) {\n          neighborsCounter++\n          dup.add(n)\n          // console.log(n, 'hhh')\n        }\n      }\n    }\n    if (col - 1 >= 0) {\n      if (this.board[row][col - 1]) {\n        let n = [row, col - 1]\n        n = JSON.stringify(n)\n        // console.log(n, 'me')\n        if (!dup.has(n)) {\n          // console.log(row, ',', col - 1, 'wah')\n          neighborsCounter++\n          dup.add(n)\n          // console.log(dup, row, col - 1, 'here?')\n        }\n      }\n    }\n    if (row + 1 < this.board.length) {\n      if (this.board[row + 1][col]) {\n        let n = [row + 1, col]\n        n = JSON.stringify(n)\n        if (!dup.has(n)) {\n          neighborsCounter++\n          dup.add(n)\n        }\n      }\n    }\n\n    if (col + 1 < this.board.length) {\n      if (this.board[row][col + 1]) {\n        let n = [row, col + 1]\n        n = JSON.stringify(n)\n        if (!dup.has(n)) {\n          neighborsCounter++\n          dup.add(n)\n        }\n      }\n    }\n    if (col - 1 >= 0 && row - 1 >= 0) {\n      if (this.board[row - 1][col - 1]) {\n        let n = [row - 1, col - 1]\n        n = JSON.stringify(n)\n        if (!dup.has(n)) {\n          neighborsCounter++\n          dup.add(n)\n        }\n      }\n    }\n    if (col + 1 < this.board.length && row + 1 < this.board.length) {\n      if (this.board[row + 1][col + 1]) {\n        let n = [row + 1, col + 1]\n        n = JSON.stringify(n)\n        if (!dup.has(n)) {\n          neighborsCounter++\n          dup.add(n)\n        }\n      }\n    }\n\n    if (col + 1 < this.board.length && row - 1 >= 0) {\n      if (this.board[row - 1][col + 1]) {\n        let n = [row - 1, col + 1]\n        n = JSON.stringify(n)\n        if (!dup.has(n)) {\n          neighborsCounter++\n          dup.add(n)\n        }\n      }\n\n    }\n\n    if (col - 1 >= 0 && row + 1 < this.board.length) {\n      if (this.board[row + 1][col - 1]) {\n        let n = [row + 1, col - 1]\n        n = JSON.stringify(n)\n        if (!dup.has(n)) {\n          neighborsCounter++\n          dup.add(n)\n        }\n      }\n    }\n\n    return neighborsCounter\n  }\n\n  step() {\n    // the step function gets called over and over again\n    // each time it is called\n    // it calcullates who lives and who dies\n    // and updates the board '\n    let tempBoard = JSON.parse(JSON.stringify(this.board));\n\n    for (let row = 0; row < this.board.length; row++) {\n      // console.log(row, 'row')\n      for (let col = 0; col < this.board.length; col++) {\n        // console.log(tempBoard)\n        // For a space that is 'populated':\n        // Each cell with one or no neighbors dies, as if by solitude.\n        // Each cell with four or more neighbors dies, as if by overpopulation.\n        // Each cell with two or three neighbors survives.\n        // For a space that is 'empty' or 'unpopulated'\n        // Each cell with three neighbors becomes populated.\n        const cell = this.board[row][col]\n        let neighborsCounter = this.countNeighbors(row, col)\n        // console.log(tempBoard, '1', neighborsCounter)\n        if (cell) {\n          if (neighborsCounter <= 1) {\n            tempBoard[row][col] = false\n            // console.log(tempBoard, '2', neighborsCounter)\n          }\n          if (neighborsCounter === 3 || neighborsCounter === 2) {\n            tempBoard[row][col] = true\n            // console.log(tempBoard, '3', neighborsCounter)\n          }\n          if (neighborsCounter >= 4) {\n            tempBoard[row][col] = false\n          }\n        } else {\n          // console.log(neighborsCounter, 'neighborsCounter')\n          if (neighborsCounter === 3) {\n            tempBoard[row][col] = true\n\n          }\n        }\n\n      }\n    }\n    this.board = tempBoard\n  }\n\n  // console.log(this.board, cell)\n\n\n  toggle(row, col) {\n    // toggle(row, column) // this is an action the human player can take. each time it runs it toggles a cell eitgher on or off\n    if (this.board[row][col] === false) {\n      this.board[row][col] = true\n    }\n    return this.board\n  }\n\n}\n\n// const meow = new Game(10, 10)\n\n// meow.toggle(1, 1)\n// meow.toggle(2, 2)\n// meow.toggle(3, 2)\n// meow.toggle(3, 1)\n// meow.toggle(3, 0)\n\n//button- click grids \n//button- to click next step()\n//button- to clear everything \n\nfunction App() {\n\n  const [board, setBoard] = useState([])\n\n  const [neighbors, setneighbors] = useState()\n  useEffect(() => {\n    //display the board  10x10? \n    let game = new Game(25, 25)\n    let tempboard = game.board\n    // setBoard(makeboard)\n    setBoard(tempboard)\n  }, []);\n\n\n  function toggle(square) {\n    let copyBoard = board\n    let pink = 'pink'\n    let row = square['id'][0]\n    let col = square['id'][1]\n    copyBoard[row][col]['color'] = pink\n\n    setBoard([...copyBoard])\n    console.log(getNeighbors(board, row, col), 'pinkllll')\n  }\n\n  function step(board) {\n    let tempBoard = board;\n\n    for (let row = 0; row < tempBoard.length; row++) {\n      for (let col = 0; col < tempBoard.length; col++) {\n        const cell = tempBoard[row][col]['color']\n        let neighborsCounter = getNeighbors(tempBoard, row, col)\n        // console.log(tempBoard, '1', neighborsCounter)\n        if (cell) {\n          if (neighborsCounter <= 1) {\n            tempBoard[row][col]['color'] = null\n            // console.log(tempBoard, '2', neighborsCounter)\n          }\n          if (neighborsCounter === 3 || neighborsCounter === 2) {\n            tempBoard[row][col]['color'] = 'pink'\n            // console.log(tempBoard, '3', neighborsCounter)\n          }\n          if (neighborsCounter >= 4) {\n            tempBoard[row][col]['color'] = null\n          }\n        } else {\n          // console.log(neighborsCounter, 'neighborsCounter')\n          if (neighborsCounter === 3) {\n            tempBoard[row][col]['color'] = 'pink'\n          }\n        }\n      }\n    }\n    setBoard([...tempBoard])\n\n    // console.log(Game.countNeighbors(square['id'][0], square['id'][1]))\n    // console.log(board.countNeighbors(row, col), 'hai')\n  }\n\n\n  function getNeighbors(board, row, col) {\n    let copyBoard = board\n    let neighborsCounter = 0\n    let dup = new Set([])\n    // console.log(copyBoard[row][col]['color'])\n    if (row - 1 > 0) {\n      if (copyBoard[row - 1][col]['color'] === 'pink') {\n        console.log('waa')\n        let n = [row - 1, col]\n        n = JSON.stringify(n)\n        if (!dup.has(n)) {\n          neighborsCounter++\n          dup.add(n)\n          console.log(n, 'up')\n        }\n      }\n    }\n    if (col - 1 >= 0) {\n      if (copyBoard[row][col - 1]['color'] === 'pink') {\n        let n = [row, col - 1]\n        n = JSON.stringify(n)\n        // console.log(n, 'me')\n        if (!dup.has(n)) {\n          // console.log(row, ',', col - 1, 'wah')\n          neighborsCounter++\n          dup.add(n)\n          // console.log(dup, row, col - 1, 'here?')\n        }\n      }\n    }\n    if (row + 1 < copyBoard.length) {\n      if (copyBoard[row + 1][col]['color'] === 'pink') {\n        let n = [row + 1, col]\n        n = JSON.stringify(n)\n        if (!dup.has(n)) {\n          console.log(n)\n          neighborsCounter++\n          dup.add(n)\n        }\n      }\n    }\n\n    if (col + 1 < copyBoard.length) {\n      if (copyBoard[row][col + 1]['color'] === 'pink') {\n        let n = [row, col + 1]\n        n = JSON.stringify(n)\n        if (!dup.has(n)) {\n          console.log(n)\n          neighborsCounter++\n          dup.add(n)\n        }\n      }\n    }\n    if (col - 1 >= 0 && row - 1 >= 0) {\n      if (copyBoard[row - 1][col - 1]['color'] === 'pink') {\n        let n = [row - 1, col - 1]\n        n = JSON.stringify(n)\n        if (!dup.has(n)) {\n          console.log(n)\n          neighborsCounter++\n          dup.add(n)\n        }\n      }\n    }\n    if (col + 1 < copyBoard.length && row + 1 < copyBoard.length) {\n      if (copyBoard[row + 1][col + 1]['color'] === 'pink') {\n        let n = [row + 1, col + 1]\n        n = JSON.stringify(n)\n        if (!dup.has(n)) {\n          console.log(n)\n          neighborsCounter++\n          dup.add(n)\n        }\n      }\n    }\n\n    if (col + 1 < copyBoard.length && row - 1 >= 0) {\n      if (copyBoard[row - 1][col + 1]['color'] === 'pink') {\n        let n = [row - 1, col + 1]\n        n = JSON.stringify(n)\n        if (!dup.has(n)) {\n          console.log(n)\n          neighborsCounter++\n          dup.add(n)\n        }\n      }\n\n    }\n\n    if (col - 1 >= 0 && row + 1 < board.length) {\n      if (board[row + 1][col - 1]['color'] === 'pink') {\n        let n = [row + 1, col - 1]\n        n = JSON.stringify(n)\n        if (!dup.has(n)) {\n          console.log(n)\n          neighborsCounter++\n          dup.add(n)\n        }\n      }\n    }\n    return neighborsCounter\n    // setneighbors(neighborsCounter)\n\n  }\n\n\n\n  return (\n    <div>\n      <Container className='grid'>\n        <h1>I NEED SOME SPACE HERE </h1>\n        {board.map((squareLists) => squareLists.map((grid) =>\n          <button className={`squareBorder ${grid.color}`} onClick={(e) => toggle(grid)\n          }  > </button>))}\n        <button onClick={(e) => step(board)}> </button>\n      </Container>\n\n    </div >\n\n  );\n}\n\nexport default App;\n\n"],"sourceRoot":""}